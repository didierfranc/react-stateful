// @flow
declare module 'react-waterfall' {
  declare type State = {}
  declare type Self = {}
  declare type Action = (State) => {}
  declare type Actions = { [string]: Action }
  declare type Subscriber = (Action, State, any) => void
  declare type Middleware = (String, any) => void
  declare type MiddlewareFactory = (Config, Self, Actions[]) => Middleware
  declare type Context = { Provider: React$Component<*>, Consumer: React$Component<*> }

  declare type Config = {
    initialState: State,
    actions: Actions,
  }

  declare type ProviderProp = {
    store: Store,
    children: Function,
  }

  declare type ConsumerProp = {
    context: Context,
    mapStateToProps: Function,
    children: Function
  }

  declare export class Consumer extends React$Component<ConsumerProp> {
  }

  declare export class Provider extends React$Component<ProviderProp> {
    value: { actions: Actions[], state: any }
  }

  declare class Store {
    constructor(store: Config, middlewares?: MiddlewareFactory[]): Store
    context: Context
    initialState: any
    factories: ?MiddlewareFactory[]
    middlewares: ?Middleware[]
    provider: ?Provider
    subscribers: ?Subscriber[]
    actions: Actions
    getState: () => any
    attach: (Provider) => void
    subscribe: (Subscriber) => void
    setState: (Action, any) => void
  }

  declare export var connect: (mapStateToProps: Function) => (React$Component<*>) => React$Component<*>
  declare export var initStore: (options: Config, middlewares?: MiddlewareFactory[]) => Store
}
